{"version":3,"file":"static/js/741.f148ce0f.chunk.js","mappings":"kLAKMA,EAAU,mCAAG,WAAOC,EAAOC,GAAd,uFACMC,EAAAA,EAAAA,IAAA,UAHb,iCAGa,OACZF,EADY,oBAJb,mCAIa,kBACkBC,IAFxB,cACXE,EADW,yBAIVA,EAASC,MAJC,2CAAH,wDAOhB,K,4HCXA,EAA4B,wBAA5B,EAA0D,kB,oECMpDC,EAAO,WACX,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACRH,GAAa,GACb,IAAMI,EAAG,mCAAG,8GAEejB,EAAAA,EAAAA,GAAW,SAAD,OAAUc,EAAV,gBAFzB,OAEFV,EAFE,OAGRK,EAASL,EAASc,MAHV,gDAKRP,EAAS,CAAED,MAAK,OALR,yBAORG,GAAa,GAPL,4EAAH,qDAUTI,GACD,GAAE,CAACH,KAGF,gCACoB,IAAjBN,EAAMW,SAAgB,uBAAG,uCACzBT,IAAS,uBAAG,4BACZE,GACC,SAAC,IAAD,KAEA,eAAIQ,UAAWC,EAAf,SACGb,EAAMc,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,cAAeC,EAAjC,EAAiCA,aAAjC,OACT,2BACE,yBAAG,cAAYF,MACf,uBAAIC,KACJ,gBACEE,IAAG,0CAAqCD,GACxCE,IAAI,GACJR,UAAWC,MANNE,EADA,QAgBpB,EACD,IAEAjB,EAAKuB,UAAY,CACfL,UAAWM,IAAAA,OACXL,cAAeK,IAAAA,OACfP,GAAIO,IAAAA,OACJJ,aAAcI,IAAAA,OACdlB,UAAWkB,IAAAA,KACXpB,MAAOoB,IAAAA,OACPC,OAAQD,IAAAA,M,2FC5DGE,EAAS,WAClB,OACA,SAAC,KAAD,CACFC,MAAM,MACNC,MAAM,WAGP,C,mCCAD,IAAIC,EAAuBC,EAAQ,MAEnC,SAASC,IAAkB,CAC3B,SAASC,IAA2B,CACpCA,EAAuBC,kBAAoBF,EAE3CG,EAAOC,QAAU,WACf,SAASC,EAAKC,EAAOC,EAAUC,EAAeC,EAAUC,EAAcC,GACpE,GAAIA,IAAWb,EAAf,CAIA,IAAIc,EAAM,IAAIC,MACZ,mLAKF,MADAD,EAAIE,KAAO,sBACLF,CAPL,CAQF,CAED,SAASG,IACP,OAAOV,CACR,CAHDA,EAAKW,WAAaX,EAMlB,IAAIY,EAAiB,CACnBC,MAAOb,EACPc,OAAQd,EACRe,KAAMf,EACNgB,KAAMhB,EACNiB,OAAQjB,EACRkB,OAAQlB,EACRmB,OAAQnB,EACRoB,OAAQpB,EAERqB,IAAKrB,EACLsB,QAASZ,EACTa,QAASvB,EACTwB,YAAaxB,EACbyB,WAAYf,EACZgB,KAAM1B,EACN2B,SAAUjB,EACVkB,MAAOlB,EACPmB,UAAWnB,EACXoB,MAAOpB,EACPqB,MAAOrB,EAEPsB,eAAgBpC,EAChBC,kBAAmBF,GAKrB,OAFAiB,EAAexB,UAAYwB,EAEpBA,CACR,C,uBC/CCd,EAAOC,QAAUL,EAAQ,IAARA,E,gCCNnBI,EAAOC,QAFoB,8C","sources":["Servises/servises.jsx","webpack://react-homework-template/./src/components/Cast/cast.module.css?8374","components/Cast/cast.jsx","components/Loader/loader.jsx","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = '1e9768f515bbeb1d217569014504939a';\nconst url = 'https://api.themoviedb.org/3/';\n\nconst FetchMovie = async (query, queryParams) => {\n  const response = await axios.get(\n    `${url}${query}?api_key=${api}&query=${queryParams}`\n  );\n  return response.data;\n};\n\nexport default FetchMovie;\n","// extracted by mini-css-extract-plugin\nexport default {\"castsList\":\"cast_castsList__k34Vi\",\"img\":\"cast_img__cPU03\"};","import css from './cast.module.css';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport FetchMovie from 'Servises/servises';\nimport { Loader } from '../Loader/loader';\nimport PropTypes from 'prop-types';\n\nconst Cast = () => {\n  const [casts, setCasts] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    const Foo = async () => {\n      try {\n        const response = await FetchMovie(`movie/${movieId}/credits`, ``);\n        setCasts(response.cast);\n      } catch (error) {\n        setError({ error });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    Foo();\n  }, [movieId]);\n\n  return (\n    <>\n      {casts.length === 0 && <p>We don't have casts for this movie</p>}\n      {error && <p>something went wrong...</p>}\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <ul className={css.castsList}>\n          {casts.map(({ id, character, original_name, profile_path }) => (\n            <li key={id}>\n              <p>Character: {character}</p>\n              <p>{original_name}</p>\n              <img\n                src={`https://image.tmdb.org/t/p/w500/${profile_path}`}\n                alt=\"\"\n                className={css.img}\n              />\n              {}\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\nexport default Cast;\n\nCast.prototype = {\n  character: PropTypes.string,\n  original_name: PropTypes.string,\n  id: PropTypes.number,\n  profile_path: PropTypes.string,\n  isLoading: PropTypes.bool,\n  error: PropTypes.string,\n  castsr: PropTypes.array,\n};","import { InfinitySpin } from 'react-loader-spinner';\n\nexport const Loader = () => {\n    return (\n    <InfinitySpin\n  width='200'\n  color=\"#4fa94d\"\n/>\n    )\n}","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["FetchMovie","query","queryParams","axios","response","data","Cast","useState","casts","setCasts","error","setError","isLoading","setIsLoading","movieId","useParams","useEffect","Foo","cast","length","className","css","map","id","character","original_name","profile_path","src","alt","prototype","PropTypes","castsr","Loader","width","color","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","name","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes"],"sourceRoot":""}