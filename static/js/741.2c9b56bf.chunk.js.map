{"version":3,"file":"static/js/741.2c9b56bf.chunk.js","mappings":"8KAKMA,EAAU,mCAAG,WAAOC,EAAOC,GAAd,uFACMC,EAAAA,EAAAA,IAAA,UAHb,iCAGa,OACZF,EADY,oBAJb,mCAIa,kBACkBC,IAFxB,cACXE,EADW,yBAIVA,EAASC,MAJC,2CAAH,wDAOhB,K,2GCXA,EAA4B,wBAA5B,EAA0D,kB,6CCoD1D,EA/Ca,WACX,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACRH,GAAa,GACb,IAAMI,EAAG,mCAAG,8GAEehB,EAAAA,EAAAA,GAAW,SAAD,OAAUa,EAAV,gBAFzB,OAEFT,EAFE,OAGRI,EAASJ,EAASa,MAHV,gDAKRP,EAAS,CAAED,MAAK,OALR,yBAORG,GAAa,GAPL,4EAAH,qDAUTI,GACD,GAAE,CAACH,KAGF,gCAEGJ,IAAS,uBAAG,0CAEZE,GACC,SAAC,IAAD,KAEA,eAAIO,UAAWC,EAAf,SACGZ,EAAMa,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,cAAeC,EAAjC,EAAiCA,aAAjC,OACT,2BACE,yBAAG,cAAYF,MACf,uBAAIC,KACJ,gBACEE,IAAG,0CAAqCD,GACxCE,IAAI,GACJR,UAAWC,MANNE,EADA,QAgBpB,C,4EClDYM,EAAS,WAClB,OACA,SAAC,KAAD,CACFC,MAAM,MACNC,MAAM,WAGP,C","sources":["Servises/servises.jsx","webpack://react-homework-template/./src/components/Cast/cast.module.css?8374","components/Cast/cast.jsx","components/Loader/loader.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst api = '1e9768f515bbeb1d217569014504939a';\nconst url = 'https://api.themoviedb.org/3/';\n\nconst FetchMovie = async (query, queryParams) => {\n  const response = await axios.get(\n    `${url}${query}?api_key=${api}&query=${queryParams}`\n  );\n  return response.data;\n};\n\nexport default FetchMovie;\n","// extracted by mini-css-extract-plugin\nexport default {\"castsList\":\"cast_castsList__k34Vi\",\"img\":\"cast_img__cPU03\"};","import css from './cast.module.css';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport FetchMovie from 'Servises/servises';\nimport { Loader } from '../Loader/loader';\n\nconst Cast = () => {\n  const [casts, setCasts] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    const Foo = async () => {\n      try {\n        const response = await FetchMovie(`movie/${movieId}/credits`, ``);\n        setCasts(response.cast);\n      } catch (error) {\n        setError({ error });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    Foo();\n  }, [movieId]);\n\n  return (\n    <>\n      {/* {casts.length === 0 && <p>We don't have casts for this movie</p>} */}\n      {error && <p>We don't have casts for this movie...</p>}\n      {/* {error && <p>something went wrong...</p>} */}\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <ul className={css.castsList}>\n          {casts.map(({ id, character, original_name, profile_path }) => (\n            <li key={id}>\n              <p>Character: {character}</p>\n              <p>{original_name}</p>\n              <img\n                src={`https://image.tmdb.org/t/p/w500/${profile_path}`}\n                alt=\"\"\n                className={css.img}\n              />\n              {}\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\nexport default Cast;\n","import { InfinitySpin } from 'react-loader-spinner';\n\nexport const Loader = () => {\n    return (\n    <InfinitySpin\n  width='200'\n  color=\"#4fa94d\"\n/>\n    )\n}"],"names":["FetchMovie","query","queryParams","axios","response","data","useState","casts","setCasts","error","setError","isLoading","setIsLoading","movieId","useParams","useEffect","Foo","cast","className","css","map","id","character","original_name","profile_path","src","alt","Loader","width","color"],"sourceRoot":""}